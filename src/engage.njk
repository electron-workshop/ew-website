---
title: "Engage with Electron Workshop"
description: "Stay tuned with selected topics or express your interest in volunteering or advising us along the way"
layout: base.njk
permalink: "/engage/"

# All content data in front matter
hero:
  heading: "Engage with Electron Workshop"
  subtext: "Stay tuned with selected topics or express your interest in receiving support or provide capacity or advise."

form:
  action: "/.netlify/functions/createJiraIssue"
  fields:
    name:
      label: "Full Name"
      type: "text"
      required: true
      error: "Please enter your name."
    email:
      label: "Email Address"
      type: "email"
      required: true
      error: "Please enter a valid email."
    skills:
      label: "Interests & Skills"
      type: "textarea"
      required: true
      error: "Please add a few words about your interests."

  supportAreas:
    "sa-lived-experience": "Provide lived experience insight"
    "sa-organisation": "Provide capacity as an organisation"
    "sa-individual": "Provide capacity as an individual"
    "sa-needs": "Receive support for a community group or non for profit"

  submitButton:
    text: "Submit"
    class: "btn btn-outline-primary"
---

<section class="bg-body mt-5">
  <div class="container">
    <div class="text-center text-md-start bg-body-tertiary px-5 py-4 rounded-3 shadow-sm border border-primary border-opacity-25 shadow-sm">
      <h2 class="mb-3 text-primary">{{ hero.heading }}</h2>
      <p class="text-secondary small mb-2">{{ hero.subtext }}</p>

      <form
        class="needs-validation col-md-6"
        id="VolunteerForm"
        name="VolunteerForm"
        method="POST"
        action="{{ form.action }}"
        novalidate
        autocomplete="off"
      >
        <!-- HONEYPOT (bots fill this; humans don't see it) -->
        <div class="visually-hidden" aria-hidden="true">
          <label for="company">Company</label>
          <input type="text" id="company" name="company" tabindex="-1" autocomplete="off">
        </div>
        <!-- TIME TRAP (set on load; reject ultra-fast submits server-side) -->
        <input type="hidden" id="form_ts" name="form_ts" value="">

        <!-- Name Field -->
        <div class="mb-3">
          <label for="name" class="form-label">{{ form.fields.name.label }}</label>
          <input
            type="{{ form.fields.name.type }}"
            class="form-control"
            id="name"
            name="name"
            {% if form.fields.name.required %}required{% endif %}
          >
          <div class="invalid-feedback">{{ form.fields.name.error }}</div>
        </div>

        <!-- Email Field -->
        <div class="mb-3">
          <label for="email" class="form-label">{{ form.fields.email.label }}</label>
          <input
            type="{{ form.fields.email.type }}"
            class="form-control"
            id="email"
            name="email"
            {% if form.fields.email.required %}required{% endif %}
          >
          <div class="invalid-feedback">{{ form.fields.email.error }}</div>
        </div>

        <!-- Skills Field -->
        <div class="mb-3">
          <label for="skills" class="form-label">{{ form.fields.skills.label }}</label>
          <textarea
            class="form-control"
            id="skills"
            name="skills"
            {% if form.fields.skills.required %}required{% endif %}
          ></textarea>
          <div class="invalid-feedback">{{ form.fields.skills.error }}</div>
        </div>

        <!-- Support Areas -->
        <fieldset class="mb-3">
          {% for id, label in form.supportAreas %}
          <div class="form-check">
            <input
              class="form-check-input"
              type="checkbox"
              id="{{ id }}"
              name="supportAreas"
              value="{{ label }}"
            >
            <label class="form-check-label" for="{{ id }}">{{ label }}</label>
          </div>
          {% endfor %}
        </fieldset>

        <button type="submit" class="{{ form.submitButton.class }}">
          {{ form.submitButton.text }}
        </button>
      </form>
    </div>
  </div>
</section>

<!-- Bootstrap validation -->
<script>
(() => {
  'use strict';
  // set time trap on load
  document.addEventListener('DOMContentLoaded', () => {
    const ts = document.getElementById('form_ts');
    if (ts) ts.value = Date.now().toString();
  });

  const forms = document.querySelectorAll('.needs-validation');
  Array.from(forms).forEach(form => {
    form.addEventListener('submit', (event) => {
      // client-side honeypot check (bots may bypass this; server still validates)
      const company = form.querySelector('#company');
      if (company && company.value.trim() !== '') {
        event.preventDefault();
        event.stopPropagation();
        return;
      }
      if (!form.checkValidity()) {
        event.preventDefault();
        event.stopPropagation();
      }
      form.classList.add('was-validated');
    }, false);
  });
})();
</script>

<!-- Prefill from URL params -->
<script>
(function () {
  const params = new URLSearchParams(window.location.search);
  const setFieldFromParams = (selector, keys) => {
    const el = document.querySelector(selector);
    if (!el) return;
    for (const k of keys) {
      const v = params.get(k);
      if (v !== null && v !== undefined && v !== "") { el.value = v; return; }
    }
  };

  setFieldFromParams('#name',   ['name','fullName']);
  setFieldFromParams('#email',  ['email','e']);
  setFieldFromParams('#skills', ['skills','interests','interest','notes']);

  const rawVals = [];
  const pull = (key) => params.getAll(key).forEach(v => rawVals.push(v));
  pull('supportAreas'); pull('supportAreas[]');

  const wanted = rawVals.flatMap(v => String(v).split(','))
                        .map(v => v.trim().toLowerCase())
                        .filter(Boolean);

  if (wanted.length) {
    // Build alias mapping from support area aliases
    const aliasToId = {{ form.supportAreaAliases | dump | safe }};
    const idToValue = {{ form.supportAreas | dump | safe }};

    // Convert aliases to actual values for matching
    const alias = {};
    Object.entries(aliasToId).forEach(([aliasKey, id]) => {
      alias[aliasKey] = idToValue[id];
    });

    const targets = new Set(wanted.map(w => (alias[w] || w).toLowerCase()));
    document.querySelectorAll('input[name="supportAreas"][type="checkbox"]').forEach(cb => {
      const val = (cb.value || '').trim().toLowerCase();
      if (targets.has(val)) cb.checked = true;
    });
  }
})();
</script>
